import org.gradle.model.*
import org.gradle.model.collection.*

@Managed
interface Domain {
    ModelSet<Flavour> getFlavours()
    ModelSet<Type> getTypes()
    ModelSet<Variant> getVariants()
}

@Managed
interface Flavour {
    String getName()
    void setName(String name)
    String getP1()
    void setP1(String p1)
    String getP2()
    void setP2(String p2)
    String getP3()
    void setP3(String p3)
    String getP4()
    void setP4(String p4)
}

@Managed
interface Type {
    String getName()
    void setName(String name)
    String getP1()
    void setP1(String p1)
    String getP2()
    void setP2(String p2)
    String getP3()
    void setP3(String p3)
    String getP4()
    void setP4(String p4)
}

@Managed
abstract class Variant {
    abstract Flavour getFlavour()
    abstract void setFlavour(Flavour flavour)

    abstract Type getType()
    abstract void setType(Type type)

    abstract String getP1()
    abstract void setP1(String p1)
    abstract String getP2()
    abstract void setP2(String p2)
    abstract String getP3()
    abstract void setP3(String p3)
    abstract String getP4()
    abstract void setP4(String p4)

    String getName() {
        flavour.name + type.name
    }
}

@Managed
interface Extension1 {
    String getP1()
    void setP1(String p1)
    String getP2()
    void setP2(String p2)
}

@Managed
interface Extension2 {
    String getP3()
    void setP3(String p3)
    String getP4()
    void setP4(String p4)
}

model {
    domain(Domain)
    e1(Extension1) {
        p1 = "p1"
        p2 = "p2"
    }
    e2(Extension2) {
        p3 = "p3"
        p4 = "p4"
    }
    domain.flavours {
        <% flavourCount.times { %>
            create {
                name = "flavour${it + 1}"
                p3 = \$("e2.p3")
                p4 = \$("e2.p4")
            }
        <% } %>
    }
    domain.types {
        <% typeCount.times { %>
            create {
                name = "type${it + 1}"
                p3 = \$("e2.p3")
                p4 = \$("e2.p4")
            }
        <% } %>
    }
    domain.variants { v ->
        \$("domain.flavours").each { flavour ->
            \$("domain.types").each { type ->
                v.create {
                    p3 = \$("e2.p3")
                    p4 = \$("e2.p4")
                    it.flavour = flavour
                    it.type = type
                }
            }
        }
    }
    tasks {
        20.times {
            create("extraTask\$it", MyTaskClass) {
                description = name
                doLast {}
            }
        }
    }
    tasks { t ->
        \$("domain.variants").each { variant ->
            def t1 = t.create(variant.name + "_t1", CustomTask) {
                p3 = \$("e2.p3")
                p4 = \$("e2.p4")
            }
            def t2 = t.create(variant.name + "_t2", CustomTask) {
                p3 = \$("e2.p3")
                p4 = \$("e2.p4")
            }
            def t3 = t.create(variant.name + "_t3", CustomTask) {
                p3 = \$("e2.p3")
                p4 = \$("e2.p4")
            }
        }
    }
    tasks {
        create("allVariants") {
            dependsOn \$("domain.variants")*.name.collect { ["\${it}_t1", "\${it}_t2", "\${it}_t3"] }
        }
    }
    domain.flavours {
        beforeEach {
            it.p1 = \$("e1.p1")
            it.p2 = \$("e1.p2")
        }
    }
    domain.types {
        beforeEach {
            it.p1 = \$("e1.p1")
            it.p2 = \$("e1.p2")
        }
    }
    domain.variants {
        beforeEach {
            it.p1 = \$("e1.p1")
            it.p2 = \$("e1.p2")
        }
    }
    tasks {
        withType(CustomTask) {
            it.p1 = \$("e1.p1")
            it.p2 = \$("e1.p2")
        }
    }
}

class CustomTask extends DefaultTask {
    @Input
    String p1
    @Input
    String p2
    @Input
    String p3
    @Input
    String p4
}

class MyTaskClass extends DefaultTask {

    @InputFiles
    FileCollection input

    @OutputFiles
    FileCollection output

    @Input
    boolean flag

}
