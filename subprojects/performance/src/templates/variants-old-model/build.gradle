class Domain {
    NamedDomainObjectContainer<Flavour> flavours
    NamedDomainObjectContainer<Type> types
    NamedDomainObjectContainer<Variant> variants

    Domain(Project project) {
        flavours = project.container(Flavour) { new Flavour(name: it) }
        types = project.container(Type) { new Type(name: it) }
        variants = project.container(Variant) { new Variant(name: it) }
    }

    void flavours(Closure closure) {
        ConfigureUtil.configure(closure, flavours)
    }

    void types(Closure closure) {
        ConfigureUtil.configure(closure, types)
    }
}

class Extension1 {
    String p1
    String p2
}

class Extension2 {
    String p3
    String p4
}

class Flavour {
    String name
    String p1
    String p2
    String p3
    String p4
}

class Type {
    String name
    String p1
    String p2
    String p3
    String p4
}

class Variant {
    String name
    Flavour flavour
    Type type
    String p1
    String p2
    String p3
    String p4
}

extensions.create("domain", Domain, project)
extensions.create("e1", Extension1)
extensions.create("e2", Extension2)

domain.flavours.all {
    it.p1 = e1.p1
    it.p2 = e1.p2
}

domain.types.all {
    it.p1 = e1.p1
    it.p2 = e1.p2
}

domain.variants.all {
    it.p1 = e1.p1
    it.p2 = e1.p2
}

tasks.withType(CustomTask) {
    it.p1 = e1.p1
    it.p2 = e1.p2
}

task allVariants

domain {
    e1 {
        p1 = "p1"
        p2 = "p2"
    }
    e2 {
        p3 = "p3"
        p4 = "p4"
    }
    variants.all { variant ->
        def t1 = tasks.create(variant.name + "_t1", CustomTask) {
            p3 = e2.p3
            p4 = e2.p4
        }
        def t2 = tasks.create(variant.name + "_t2", CustomTask) {
            p3 = e2.p3
            p4 = e2.p4
        }
        def t3 = tasks.create(variant.name + "_t3", CustomTask) {
            p3 = e2.p3
            p4 = e2.p4
        }
        allVariants.dependsOn t1, t2, t3
    }

    flavours.all { flavour ->
        types.all { type ->
            variants.create("\${flavour.name + type.name}") {
                p3 = e2.p3
                p4 = e2.p4
                it.flavour = flavour
                it.type = type
            }
        }
    }

    flavours {
        <% flavourCount.times { %>
        flavour<%= it + 1 %> {
            p3 = e2.p3
            p4 = e2.p4
        }
        <% } %>
    }

    types {
        <% typeCount.times { %>
        type<%= it + 1 %> {
            p3 = e2.p3
            p4 = e2.p4
        }
        <% } %>
    }
}

class CustomTask extends DefaultTask {
    @Input
    String p1
    @Input
    String p2
    @Input
    String p3
    @Input
    String p4
}

20.times {
    tasks.create("extraTask\$it", MyTaskClass) {
        description = name
        doLast {}
    }
}

class MyTaskClass extends DefaultTask {

    @InputFiles
    FileCollection input

    @OutputFiles
    FileCollection output

    @Input
    boolean flag

}