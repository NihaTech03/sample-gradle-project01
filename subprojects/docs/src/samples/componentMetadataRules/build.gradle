import org.gradle.model.Mutate

repositories {
    ivy {
        url "$projectDir/repo"
    }
}

configurations {
    config1
    config2
    config3
    config4
    config5
    config6
}

// START SNIPPET latest-selector
dependencies {
    config1 "org.sample:client:latest.integration"
    config2 "org.sample:client:latest.release"
}

task listConfigs << {
    configurations.config1.each { println it.name }
    println()
    configurations.config2.each { println it.name}
}
// END SNIPPET latest-selector

// START SNIPPET custom-status-scheme
dependencies {
    config3 "org.sample:api:latest.silver"
    components {
        all { ComponentMetadataDetails details ->
            if (details.id.group == "org.sample" && details.id.name == "api") {
                details.statusScheme = ["bronze", "silver", "gold", "platinum"]
            }
        }
    }
}
// END SNIPPET custom-status-scheme

task listApi << {
    configurations.config3.each { println "Resolved: ${it.name}" }
}

// START SNIPPET custom-status-scheme-module
dependencies {
    config4 "org.sample:lib:latest.prod"
    components {
        withModule('org.sample:lib') { ComponentMetadataDetails details ->
            details.statusScheme = ["int", "rc", "prod"]
        }
    }
}
// END SNIPPET custom-status-scheme-module

task listLib << {
    configurations.config4.each { println "Resolved: ${it.name}" }
}

// START SNIPPET rule-source-component-metadata-rule
dependencies {
    config5 "org.sample:api:latest.gold"
    components {
        withModule('org.sample:api', new CustomStatusRule())
    }
}

class CustomStatusRule {
    @Mutate
    void setStatusScheme(ComponentMetadataDetails details) {
        details.statusScheme = ["bronze", "silver", "gold", "platinum"]
    }
}
// END SNIPPET rule-source-component-metadata-rule

task listWithRule << {
    configurations.config5.each { println "Resolved: ${it.name}" }
}

// START SNIPPET ivy-component-metadata-rule
dependencies {
    config6 "org.sample:lib:latest.rc"
    components {
        withModule("org.sample:lib") { ComponentMetadataDetails details, IvyModuleDescriptor ivyModule ->
            if (ivyModule.branch == 'testing') {
                details.status = "rc"
            }
        }
    }
}
// END SNIPPET ivy-component-metadata-rule

task listWithIvyRule << {
    configurations.config6.each { println "Resolved: ${it.name}" }
}
